name: Actions ðŸ˜Ž

on:
  workflow_dispatch: {}
  push:
    branches:
      - Releases
  # pull_request:
  #   branches:
  #     - Releases

jobs:
  # checklicense:
  #   name: Check for UNITY_LICENSE in GitHub Secrets
  #   runs-on: ubuntu-latest
  #   outputs:
  #     is_unity_license_set: ${{ steps.checklicense_job.outputs.is_unity_license_set }}
  #   steps:
  #     - name: Check whether unity activation requests should be done
  #       id: checklicense_job
  #       env:
  #         UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  #         UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
  #         UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
  #       run: |
  #           echo "Skip activation job: ${{ env.UNITY_LICENSE != '' }}"
  #           export is_unity_license_set="${{ env.UNITY_LICENSE != '' }}"
  #           echo "is_unity_license_set=$is_unity_license_set" >> $GITHUB_OUTPUT

  # activation:
  #   needs: checklicense
  #   if: needs.checklicense.outputs.is_unity_license_set == 'false'
  #   name: Request manual activation file ðŸ”‘
  #   runs-on: ubuntu-latest
  #   steps:
  #     # Request manual activation file
  #     - name: Request manual activation file
  #       id: getManualLicenseFile
  #       uses: game-ci/unity-request-activation-file@v2
  #     # Upload artifact (Unity_v20XX.X.XXXX.alf)
  #     - name: Expose as artifact
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: ${{ steps.getManualLicenseFile.outputs.filePath }}
  #         path: ${{ steps.getManualLicenseFile.outputs.filePath }}

  

  build:
    # needs: checklicense
    # if: needs.checklicense.outputs.is_unity_license_set == 'true'
    name: Build my project âœ¨
    runs-on: ubuntu-latest
    steps:
      # Checkout (without LFS)
      - name: Checkout repository
        uses: actions/checkout@v4

      #Debug info
      - name: Debug information
        run: |
          git status
          git log -1
          
      # Git LFS
      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v3
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard

      # Cache
      - uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-
  
      # # Test
      # - name: Run tests
      #   uses: game-ci/unity-test-runner@v4
      #   env:
      #     UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
      #   with:
      #     githubToken: ${{ secrets.GITHUB_TOKEN }}

      # Build
      - name: Build project
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: Android

      # Output
      - uses: actions/upload-artifact@v3
        with:
          name: Build
          path: build
